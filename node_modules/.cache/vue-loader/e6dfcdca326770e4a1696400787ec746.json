{"remainingRequest":"/Users/orion.tribe/Projects/jsr/eduvision/vue-material-kit-master/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/orion.tribe/Projects/jsr/eduvision/vue-material-kit-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/orion.tribe/Projects/jsr/eduvision/vue-material-kit-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orion.tribe/Projects/jsr/eduvision/vue-material-kit-master/src/views/Index.vue?vue&type=template&id=23543608&","dependencies":[{"path":"/Users/orion.tribe/Projects/jsr/eduvision/vue-material-kit-master/src/views/Index.vue","mtime":1620197356691},{"path":"/Users/orion.tribe/Projects/jsr/eduvision/vue-material-kit-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orion.tribe/Projects/jsr/eduvision/vue-material-kit-master/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/orion.tribe/Projects/jsr/eduvision/vue-material-kit-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orion.tribe/Projects/jsr/eduvision/vue-material-kit-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}